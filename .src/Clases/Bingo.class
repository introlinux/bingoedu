' Gambas class file

'eventos

Event inicio() 'Inicia la generacion de cartones. Utilizado para mostrar formulario FormAvanceCreacionCartones
Event creadoCarton(n As Integer) 'crea evento de que se ha terminado de crear un carton
Event FinCarton() 'final de creación de carton. Sirve para cerrar el formulario  FormAvanceCreacionCartones

'variables y propiedades
Property NombreFichero As String ''nombre del fichero .be para operaciones obtener el nombre de la carpeta, copiar archivos
Property titulo As String ''titulo del bingo -> tematica
Property descripcion As String ''describe como es el bingo: se trata de un bingo para aprender matematica de 1º de eso. Tema Tablas de multiplicar
Property tipo As String ''indica el tipo de bingo: para lenguaje,matematicas, ingles, etc...

Public ArrayElementosBingo As New Elemento[] ''donde se guarda los datos que componen el bingo
Public ArrayElementosCarton As New Elemento[] ''donde se guarda los datos que componen el carton

Public ListaElementosBingo As New String[] 'contiene la lista de los id de los elementos de bingo
Public ListaElementosCarton As New String[] 'contiene la lista de los id de los elementos de carton

Public listaCartones As New String[] ' contiene la lista de cartones
Public ArrayCartones As New Carton[] ' contiene los cartones que tiene el bingo

'propiedades del carton
Property tituloCarton As String ''titulo de los cartones

Property tamanoCuadricula As String ''tamaño de la cuadricula 4x3,5x4,5x5

Property cuadrosNegros As Integer ''indica los huecos rellenos en negro

Property cuadrosBlancos As Integer '' indica los huecos que quedaran en blanco

Property ListaElementosRepetidos As String[] ''array que contiene los id de elementos del bingo (listaElementoCARTON) que tienen que repetirse en cada carton
Property ArrayElementosRepetidos As Elemento[] '' array de elementos repetidos del bingo que se repiten en cada carton.

Property NumeroCartones As Integer ''indica el numero de cartones existentes.

Private $tituloCarton As String
Private $tamanoCuadricula As String
Private $cuadrosNegros As Integer
Private $cuadrosBlancos As Integer
Private $ListaElementosRepetidos As New String[]
Private $NumeroCartones As Integer
Private $nombreFichero As String = "testbingo"
Private $ArrayElementosRepetidos As New Elemento[]

Public Sub _new()
  
  ' 'creacion de un bingo en "blanco"
  ' If Not Exist(User.home & "/bingoedu") Then
  '   Mkdir User.home & "/bingoedu"
  ' Endif
  '
  ' ''NOTE: modo test para debug, creacion de directorio test de bingo
  ' If Not Exist(User.home & "/bingoedu/" & $nombreFichero) Then
  '   Mkdir User.home & "/bingoedu/" & $nombreFichero
  ' Endif
  Dim elementoNegro As New ElementoImagen
  Dim elementoBlanco As New ElementoImagen
  
  elementoNegro.id = "idnegro"
  elementoNegro.rutaimagen = "cuadroNegro.jpg"
  elementoBlanco.id = "idblanco"
  elementoBlanco.rutaimagen = "cuadroBlanco.jpg"
  
  ArrayElementosCarton.Add(elementoNegro)
  ArrayElementosCarton.Add(elementoBlanco)
  
  ListaElementosCarton.Add(elementoNegro.id)
  ListaElementosCarton.Add(elementoBlanco.id)
  
  Me.cuadrosBlancos = 0
  Me.cuadrosNegros = 2
  Me.NumeroCartones = 25
  
End

Public Sub cargadatos(NombreArchivo As String, Optional carpeta As Boolean) 'leo un archivo .be y lo cargo en la instancia de clase bingo.
  
  Dim arraytmp As String[]
  
  Dim a As Integer
  Dim contenido As String
  Dim VariableDatos As Variant
  Dim clasejson As New JSON354
  Dim res As Integer
  
  Dim elementoRepetido As Object
  
  If carpeta = False Then
    '------------------------------------------------------------
    'se trata de un archivo comprimido que se esta leyendo
    '------------------------------------------------------------
    '1º, descomrpimir el archivo..
    If Exist(User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & ".tar.gz") Then
      Kill User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & ".tar.gz"
      Wait 0.1
    Endif
    
    '2º creo carpeta de trabajo en User.home & "/bingoedu/"
    If Exist(User.home & "/bingoedu/" & File.BaseName(NombreArchivo)) Then
      res = Message.Question(("Existe un bingo con el mismo nombre, ¿que desea hacer?"), ("Borra y continua"), ("Cancelar Operacion"))
      If res = 1 Then
        Shell "cd " & User.home & "/bingoedu/;rm -Rf " & File.BaseName(NombreArchivo) Wait 'borrado comleto de un directorio con sus ficheros
      Else
        'se ha cancelado la opercion
        '
        Return
      Endif
    Endif
    'descomprimo el archivo
    Mkdir User.home & "/bingoedu/" & File.BaseName(NombreArchivo)
    Wait 0.1
    Copy NombreArchivo To User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/" & File.BaseName(NombreArchivo) & ".tar.gz"
    Wait 0.1
    'descomprimo
    Shell "cd " & User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/; tar -zxvf \"" & File.BaseName(NombreArchivo) & ".tar.gz\"" Wait
    'borro el archivo comprimido
    Wait 0.1
    Kill User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/" & File.BaseName(NombreArchivo) & ".tar.gz"
    
  Endif
  
  'leo fichero de datos
  'y lo empiezo a cargar en memoria
  '
  If Not Exist(User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/" & "pruebas.dat") Then
    'no existe el fichero de datos... lo creo vacio
    File.Save(User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/" & "pruebas.dat", creoContenidoVacio())
  Endif
  
  contenido = File.Load(User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/" & "pruebas.dat")
  
  VariableDatos = clasejson.Decode(contenido)
  
  'asigno datos...
  
  Me.titulo = VariableDatos["titulo"]
  Me.descripcion = VariableDatos["descripcion"]
  Me.tipo = VariableDatos["tipo"]
  Me.NombreFichero = NombreArchivo
  'listas
  'limpiar listas de elmentos anteriores
  Me.ListaElementosBingo.Clear()
  Me.ListaElementosCarton.Clear()
  Me.ListaElementosRepetidos.Clear()
  Me.listaCartones.Clear()
  '
  '
  
  arraytmp = Split(VariableDatos["ListaElementoBingo"], "|")
  For a = 0 To arraytmp.max
    Me.ListaElementosBingo.Add(arraytmp[a])
  Next
  
  arraytmp = Split(VariableDatos["ListaElementoCarton"], "|")
  For a = 0 To arraytmp.max
    Me.ListaElementosCarton.Add(arraytmp[a])
  Next
  
  agregarListaElementos(VariableDatos, Me.ListaElementosBingo, Me.ArrayElementosBingo)
  agregarListaElementos(VariableDatos, Me.ListaElementosCarton, Me.ArrayElementosCarton)
  
  ''NOTE: lista de cartornes y array de cartones
  
  Me.tituloCarton = VariableDatos["TituloCarton"]
  Me.tamanoCuadricula = VariableDatos["TamanoCuadricula"]
  Me.cuadrosNegros = VariableDatos["CuadrosNegros"]
  Me.cuadrosBlancos = VariableDatos["CuadrosBlancos"]
  
  arraytmp = Split(VariableDatos["ListaElementosRepetidos"], "|")
  For a = 0 To arraytmp.max
    Me.ListaElementosRepetidos.Add(arraytmp[a])
    'añado al Array de elemento repetido el elemnto indicado por la lista
    elementoRepetido = buscaElemento(arraytmp[a], Me.ArrayElementosBingo)
    Me.ArrayElementosRepetidos.add(elementoRepetido)
  Next
  
  Me.NumeroCartones = VariableDatos["NumeroCartones"]
  
  'lectura de cartones...
  arraytmp = Split(VariableDatos["ListaCartones"], "|")
  For a = 0 To arraytmp.max
    Me.listaCartones.Add(arraytmp[a])
  Next
  
  agregarCartones(VariableDatos, Me.listaCartones, Me.ArrayCartones)
  
End

Public Sub agregarCartones(v As Variant, lista As String[], ArrayCar As Carton[])
  
  Dim a, b As Integer
  
  Dim c As Carton
  
  Dim arraytmp As String[]
  
  ArrayCar.Clear() 'limpio el array de cartones por si hubiera elementos anteriores.
  
  For a = 0 To lista.Max
    c = New Carton
    c.id = lista[a]
    'cargo lista de elemntos cartones que incluye el carton
    arraytmp = Split(V[lista[a]]["lista"], "|")
    For b = 0 To arraytmp.max
      c.ArraIdElementos.Add(arraytmp[b])
    Next
    ArrayCar.Add(c)
  Next
  
End

Public Sub agregarListaElementos(v As Variant, lista As String[], ArrayElementos As Elemento[])
  'repetir por cada lista de elemntos Bingo.
  
  Dim a As Integer
  Dim e As Object
  
  ArrayElementos.Clear() 'limpio elementos anteriores del array donde voy a introducir los elementos leidos
  
  For a = 0 To lista.Max
    '  Debug V[lista[a]]["datos"]["tipo"]
    
    Select Case V[lista[a]]["datos"]["tipo"]
      Case "sonido"
        e = New ElementoSonido
        e.id = V[lista[a]]["id"]
        e.enlace = V[lista[a]]["datos"]["enlace"]
        e.rutasonido = V[lista[a]]["datos"]["rutasonido"]
        ArrayElementos.Add(e)
      Case "texto"
        e = New ElementoTexto
        e.id = V[lista[a]]["id"]
        e.enlace = V[lista[a]]["datos"]["enlace"]
        e.texto = V[lista[a]]["datos"]["texto"]
        ArrayElementos.Add(e)
      Case "imagen"
        e = New ElementoImagen
        e.id = V[lista[a]]["id"]
        e.enlace = V[lista[a]]["datos"]["enlace"]
        e.rutaimagen = V[lista[a]]["datos"]["rutaimagen"]
        ArrayElementos.Add(e)
        
    End Select
  Next
  
End

Public Sub guardarBingo(CARPETA As Boolean) ''True: guarda los datos en carpeta  directorio /home/usuario/bingoedu/<br> FALSE guardar archivo tar.gz con datos del bingo actual ".be"
  
  Dim comando As String ''comando que se ejecutara para crear el tae.gz
  Dim salida As String ''salida que proporciona el comando shell
  Dim res As Integer
  'El archirvo "nombre" debe de contener:
  '-Fichero de texto con Estructura json con datos de
  '1º generar estructura de datos de: titulo, descripcion, tipo,
  '2º generar estructura de datos del Array Elementos Bingo
  '3º generar estructura de datos del Array Elementos Carton
  'Toda la información se pasa a una variable $contenido y se guarda
  
  If Not Exist(User.home & "/bingoedu/" & $nombreFichero) Then
    Mkdir User.home & "/bingoedu/" & $nombreFichero
  Endif
  
  File.Save(User.home & "/bingoedu/" & $nombreFichero & "/pruebas.dat", generaJson())
  '-imagenes y sonidos
  '-todo guardado en un tar.gz para facil manipulacion y compartir con otros usuarios.
  
  If CARPETA = False Then
    
    'en el caso de que la variable CARPETA sea false, procedemos a comprimir y crear el fichero .be, en la carpeta /home/usuario/
    
    'y con terminacion ".be"
    comando = "cd " & User.home & "/bingoedu/" & $nombreFichero & "/;" ''fundamental añadir el punto y coma, para continuar la orden en el shell abierto
    comando &= "tar czvf \"" & $NombreFichero & ".tar.gz\" *" ''comprimimos lo que haya creando un fichero .tar.gz
    Print comando
    
    Shell comando To salida
    
    Inc Application.busy
    While Not Exist(User.home & "/bingoedu/" & $nombreFichero & "/" & $NombreFichero & ".tar.gz")
      Wait 0.01
    Wend
    
    Dec Application.Busy
    
    If Exist(User.home & "/" & $NombreFichero & ".be") Then
      res = Message.Question(("Existe un fichero con el mismo nombre, ¿desea borrarlo?"), ("Si, borralo y continua"), ("No, cancelar operación"))
      If res = 1 Then
        Kill User.home & "/" & $NombreFichero & ".be" 'borro el fichero que existe, y continuo
        
      Else
        Kill User.home & "/bingoedu/" & $nombreFichero & "/" & $NombreFichero & ".tar.gz" 'Cancelo operacion, y borro el archivo comprimido que acabo de hacer.
        '  Debug "Operacion cancelada"
        Return
        
      Endif
    Endif
    
    Move User.home & "/bingoedu/" & $nombreFichero & "/" & $NombreFichero & ".tar.gz" To User.home & "/" & $NombreFichero & ".be"
    
  Endif
  
  ''NOTE: ver este enlace http://jsbsan.blogspot.com.es/2014/12/truco-como-guardar-y-abrir-comprimidos.html, para el tema de descompresion.
  
End

Public Function generaJson() As String
  
  Dim c As New JSON354
  
  Dim tempcole As New Collection
  
  Dim tmpElemento As Elemento
  
  Dim tmpCarton As Carton
  'Titulo
  tempcole.Add(Me.titulo, "titulo")
  'descripcion
  tempcole.Add(Me.descripcion, "descripcion")
  'tipo
  tempcole.Add(Me.tipo, "tipo") ''tipo del bingo (ingles, matematica, lengua..)
  'lista de elementos bingo y elementos de cartones, separados por caracter |
  tempcole.Add(Me.ListaElementosBingo.Join("|"), "ListaElementoBingo")
  tempcole.Add(Me.ListaElementosCarton.Join("|"), "ListaElementoCarton")
  
  'guardar elementos....
  For Each tmpElemento In ArrayElementosBingo
    tempcole.Add(tmpElemento.creaVariant(), tmpElemento.id)
  Next
  
  ''TODO: mirarlo. todos los elementos son indistintos si estan en el bingo que en el carton
  For Each tmpElemento In ArrayElementosCarton
    tempcole.Add(tmpElemento.creaVariant(), tmpElemento.id)
  Next
  
  'tambien haria falta pasar los datos del carton: tamaño, huecos en negros, casillas vacias, elementos fijos.
  tempcole.Add(Me.tituloCarton, "TituloCarton")
  tempcole.Add(Me.tamanoCuadricula, "TamanoCuadricula")
  tempcole.Add(Me.cuadrosNegros, "CuadrosNegros")
  tempcole.Add(Me.cuadrosBlancos, "CuadrosBlancos")
  
  tempcole.Add(Me.ListaElementosRepetidos.Join("|"), "ListaElementosRepetidos")
  
  tempcole.Add(Me.NumeroCartones, "NumeroCartones")
  
  tempcole.Add(Me.listaCartones.Join("|"), "ListaCartones")
  
  For Each tmpCarton In Me.ArrayCartones
    tempcole.Add(tmpCarton.creaVariant(), tmpCarton.id)
  Next
  
  Return c.Encode(tempcole) 'devuelve el contenido de tmpcole como estructura json
  
End

Public Sub agregarElementoBingo(e As Elemento) 'agregas un elemento bingo a los datos del bingo.
  
  Me.ArrayElementosBingo.Add(e)
  Me.ListaElementosBingo.Add(e.id)
  
End

Public Sub agregarElementoCarton(e As Elemento) 'agrega un elemento carton a los datos del bingo
  
  Me.ArrayElementosCarton.Add(e)
  Me.ListaElementosCarton.Add(e.id)
  
End

Public Sub agregarCarton(e As Carton) ''agrega un carton a los datos del bingo
  
  Me.ArrayCartones.Add(e)
  Me.listaCartones.Add(e.id)
  
End

'-------------------------------------------------------------------------------------
Private $titulo As String
Private $descripcion As String
Private $tipo As String

Private Function titulo_Read() As String
  
  Return $titulo
  
End

Private Sub titulo_Write(Value As String)
  
  $titulo = value
  $tituloCarton = value 'para que el titulo (tematica) del bingo sea tambien la tematica del carton
  
End

Private Function descripcion_Read() As String
  
  Return $descripcion
  
End

Private Sub descripcion_Write(Value As String)
  
  $descripcion = value
  
End

Private Function tipo_Read() As String
  
  Return $tipo
  
End

Private Sub tipo_Write(Value As String)
  
  $tipo = value
  
End

Private Function tituloCarton_Read() As String
  
  Return $tituloCarton
  
End

Private Sub tituloCarton_Write(Value As String)
  
  $tituloCarton = value
  $titulo = value 'para que el titulo del Carton sea la tematica del bingo
  
End

Private Function tamanoCuadricula_Read() As String
  
  Return $tamanoCuadricula
  
End

Private Sub tamanoCuadricula_Write(Value As String)
  
  $tamanoCuadricula = value
  
End

Private Function cuadrosNegros_Read() As Integer
  
  Return $cuadrosNegros
  
End

Private Sub cuadrosNegros_Write(Value As Integer)
  
  $cuadrosNegros = value
  
End

Private Function cuadrosBlancos_Read() As Integer
  
  Return $cuadrosBlancos
  
End

Private Sub cuadrosBlancos_Write(Value As Integer)
  
  $cuadrosBlancos = value
  
End

Private Function ListaElementosRepetidos_Read() As String[]
  
  Return $ListaElementosRepetidos
  
End

Private Sub ListaElementosRepetidos_Write(Value As String[])
  
  $ListaElementosRepetidos = value
  
End

Private Function NumeroCartones_Read() As Integer
  
  Return $NumeroCartones
  
End

Private Sub NumeroCartones_Write(Value As Integer)
  
  $NumeroCartones = value
  
End

Private Function NombreFichero_Read() As String
  
  Return $nombreFichero
  
End

Private Sub NombreFichero_Write(Value As String)
  
  $nombreFichero = value
  
  'creacion de un bingo en "blanco"
  If Not Exist(User.home & "/bingoedu") Then
    Mkdir User.home & "/bingoedu"
  Endif
  
  ''NOTE: modo test para debug, creacion de directorio test de bingo
  ' If Not Exist(User.home & "/bingoedu/" & File.Name($nombreFichero)) Then
  '   Mkdir User.home & "/bingoedu/" & file.name($nombreFichero)
  ' Endif
  
End

'------------------------------------------------------------------------
'Zona de Carga de datos en Controles Gridview
'------------------------------------------------------------------------

Public Sub CargarDatosBingoCartonesGridview(g As GridView) '' Carga los datos de los elementos del bingo y cartones
  
  Dim e As Elemento
  Dim ecarton As Elemento
  
  'La carga la realizamos usando el listado de elementos de bingo
  g.Rows.count = 0 'eliminados todas las filas existentes
  g.Clear()
  For Each e In Me.ArrayElementosBingo
    
    'añado una fila al gridview..
    g.Rows.count += 1
    g.Rows.Height = 45
    'datos del elemento Bingo
    g[g.Rows.Max, 0].Picture = ImagenTipoElemento(e) 'devuelve un icono que representa
    '   g[g.Rows.Max, 0].Picture.Resize(30, 30)
    
    g[g.Rows.Max, 1].text = TextoElemento(e) ''escribira el texto, o el nombre de la imagen o sonido
    'datos del elemnto carton relacionado con el elmento bingo
    ecarton = buscaElemento(e.enlace, ArrayElementosCarton)
    'escribimos datos del elemnto carton relacinado con el elemento bingo.
    g[g.Rows.Max, 2].Picture = ImagenTipoElemento(ecarton) 'devuelve un icono que representa
    '  g[g.Rows.Max, 2].Picture.Resize(30, 30)
    
    g[g.Rows.Max, 3].text = TextoElemento(ecarton) ''escribira el texto, o el nombre de la imagen o sonido
    
    g[g.Rows.Max, 0].Refresh()
    g[g.Rows.Max, 1].Refresh()
    g[g.Rows.Max, 2].Refresh()
    g[g.Rows.Max, 3].Refresh()
    
  Next
  
  G.TAG = Me.ArrayElementosBingo
  
End

Public Sub CargaDatosGridviewDatosRepetidos(G As GridView)
  
  '  Dim ArrayEle As Elemento[]
  Dim e As Elemento
  Dim ecarton As Elemento
  
  'La carga la realizamos usando el listado de elementos de bingo
  g.Rows.count = 0 'eliminados todas las filas existentes
  g.Clear()
  
  For Each e In Me.ArrayElementosRepetidos
    
    'añado una fila al gridview..
    g.Rows.count += 1
    g.Rows.Height = 45
    'datos del elemento Bingo
    g[g.Rows.Max, 0].Picture = ImagenTipoElemento(e) 'devuelve un icono que representa
    '   g[g.Rows.Max, 0].Picture.Resize(30, 30)
    
    g[g.Rows.Max, 1].text = TextoElemento(e) ''escribira el texto, o el nombre de la imagen o sonido
    'datos del elemnto carton relacionado con el elmento bingo
    ecarton = buscaElemento(e.enlace, ArrayElementosCarton)
    'escribimos datos del elemnto carton relacinado con el elemento bingo.
    g[g.Rows.Max, 2].Picture = ImagenTipoElemento(ecarton) 'devuelve un icono que representa
    '  g[g.Rows.Max, 2].Picture.Resize(30, 30)
    
    g[g.Rows.Max, 3].text = TextoElemento(ecarton) ''escribira el texto, o el nombre de la imagen o sonido
    
    g[g.Rows.Max, 0].Refresh()
    g[g.Rows.Max, 1].Refresh()
    g[g.Rows.Max, 2].Refresh()
    g[g.Rows.Max, 3].Refresh()
    
  Next
  
  G.TAG = Me.ArrayElementosRepetidos
  
End

Public Function buscaElemento(id As String, arrayElem As Elemento[]) As Elemento
  
  Dim ebuscado As Elemento
  'dado un id, y una lista de elementos[], nos devuelve el elemento que tenga ese id.
  
  For Each ebuscado In arrayElem
    If ebuscado.id = id Then
      Return ebuscado
      
    Endif
  Next
  
  'Si llegamos a este punto, no ha encontrado el elemento enlazado...hay un error
  'poner mensaje de error o devolver null
  Return Null
  
End

'-----------------------
Public Function ImagenTipoElemento(e As Variant) As Picture
  
  Dim rutaicono As String ''icono que representa imagen, texto, o sonido
  
  If IsNull(e) Then 
    rutaIcono = "iconoletra16.png"
    Return Picture[rutaicono]
    
  Endif
  
  Select Case e.tipoElemento()
    Case Upper$("ElementoImagen")
      rutaIcono = "iconoimagen32.png"
      ' rutaicono = User.home & "/bingoedu/" & Me.NombreFichero & "/" & e.rutaimagen
    Case Upper$("ElementoTexto")
      rutaIcono = "iconoletra32.png"
    Case Upper$("ElementoSonido")
      rutaIcono = "iconosonido32.png"
  End Select
  Return Picture[rutaicono]
  
End
'---------------------------

Public Function TextoElemento(e As Variant) As String
  
  'nota de programacion:
  'En principo deberia ser la definicion de la funcion:
  '(e As elemento) en vez de (e As Variant)
  'pero cuando intento acceder a propiedades de las clases heredades ElementoTexto, ElementoImagen, me da error
  'por eso lo he tenido que dejar como Variant, y asi no me da problemas.
  '
  
  Dim contenido As String
  
  If IsNull(e) Then 
    Return "n/a"
  Endif
  
  Select Case e.tipoElemento()
    Case Upper$("ElementoImagen")
      contenido = File.Name(e.rutaimagen)
    Case Upper$("ElementoTexto")
      contenido = e.texto
    Case Upper$("ElementoSonido")
      contenido = File.name(e.rutasonido)
  End Select
  
  Return contenido
  
End

Public Function copiaFichero(ruta As String) As Boolean  ''Me encargo de copia un fichero de su origen al directorio del bingo
  
  If Exist(User.home & "/bingoedu/" & $nombreFichero & "/" & File.Name(ruta)) Then
    'existe el fichero no lo copio
    ''FIXME:
    Message.Error(("Existe un fichero con el mismo nombre"))
    'no copio el fichero...
    Return False
  Endif
  
  Try Copy ModuleVarios.URLDecode(ruta) To User.home & "/bingoedu/" & $nombreFichero & "/" & File.Name(ruta)
  
  If Error Then
    Print "Error al intentar copiar fichero "
    Print "Error texto: "; Error.Text
    Print "Error lugar: "; Error.where
    Print "Error trazada: "; Error.Backtrace.Join("\n")
    Return False
  Endif
  
  Return True
  
End

Public Function creoContenidoVacio() As String
  'generar una estructura de datos vacia
  
  Return generaJson()
  
End

Private Function ArrayElementosRepetidos_Read() As Elemento[]
  
  Return $ArrayElementosRepetidos
  
End

Private Sub ArrayElementosRepetidos_Write(Value As Elemento[])
  
  $ArrayElementosRepetidos = value
  
End

''**********************************************
''GENERAR CARTONES DEL BINGO....
''**********************************************

'Proceso de generar cartones
'Consultar el numero de cartones a generar
'repetir proceso 
'crea carton
'compara con los que hay, si es dintinto lo añade
'repite tantas veces como cartones haya que crear
' como medida de seguridad, si el numero de repeticiones es excesivo... se informa de que o son pocos elementos, o muchos cartones
'
Public Sub generarCartones() As Boolean 'si devuelve FALSE, hay un problema al crear los cartones
  
  Dim brespuesta As Boolean
  ' Dim a As Integer
  Dim contador As Integer 'nos sirve para comprobar el nuemro fallido de creacion de cartones que son iguales a los existentes
  Dim ctmp As Carton
  Dim ctmp2 As Carton
  Dim agregar As Boolean 'bandera que nos sirve para añadir carton o no a la lista de cartones
  'Dim cuadrosCuadricula As Integer
  Dim valorminimo As Integer
  
  Dim arfile As String[]
  Dim nombrefile As String
  'borro los cartones anteriores...
  Me.ArrayCartones.Clear()
  Me.listaCartones.Clear()
  
  Inc Application.Busy
  Shell ("cd /tmp;rm carton*")
  Shell ("cd " & User.home & "/bingoedu/" & Me.NombreFichero & "/;rm carton*") 'borra los cartones anteriores
  Shell ("cd " & User.home & "/bingoedu/" & Me.NombreFichero & "/;rm minicarton*") 'borra los cartones anteriores
  'comprobar el numero de elementos minino
  Select Case Me.tamanoCuadricula
    Case "4x3"
      valorminimo = 12 'para un carton
    Case "5x4"
      valorminimo = 20 'para un carton
    Case "5x5"
      valorminimo = 25 'para un carton
      
  End Select
  
  If Me.ListaElementosCarton.count < valorminimo Then 
    'hay problemas, el numero de elemntos es menos al numero de tamanocuadricula
    Return False
  Endif
  
  Raise inicio
  Wait 0.05
  
  'borra todos los archivos que empiecen por carton*
  arfile = Dir("/tmp", "carton*", gb.file)
  arfile.insert(Dir("/tmp", "minicarton*", gb.file))
  For Each nombrefile In arfile
    Kill "/tmp/" & nombrefile
  Next
  
  'copia las imagenes desde la ruta del bingo.
  '
  arfile = Dir(User.home & "/bingoedu/" & Me.NombreFichero, "*.png", gb.file)
  arfile.Insert(Dir(User.home & "/bingoedu/" & Me.NombreFichero, "*.jpg", gb.file))
  arfile.Insert(Dir(User.home & "/bingoedu/" & Me.NombreFichero, "*.jpeg", gb.file))
  
  For Each nombrefile In arfile
    Try Copy User.home & "/bingoedu/" & Me.NombreFichero & "/" & nombrefile To "/tmp/" & nombrefile
  Next
  
  While (Me.ArrayCartones.count < (Me.NumeroCartones))
    ctmp = New Carton
    ctmp.ArrayElmentosCarton = Me.ArrayElementosCarton
    ctmp.ArrayElmentosBingo = Me.ArrayElementosBingo
    brespuesta = ctmp.generarCarton(Me.tamanoCuadricula, Me.cuadrosNegros, Me.cuadrosBlancos, Me.ListaElementosRepetidos, Me.ListaElementosCarton)
    If brespuesta = False Then 
      'Message.Error("Pocos elementos definidos")
      
      Raise FinCarton()
      Return False
      
    Endif
    agregar = True
    For Each ctmp2 In ArrayCartones
      If ctmp.CompararCarton(ctmp2) Then 
        'carton generado es igual a uno existente... 
        agregar = False
        contador += 1
        If contador > Me.NumeroCartones * 10 Then 
          'hay problemas es posible de que haya unproblema al generar los cartones
          Raise FinCarton()
          Return False 
        Endif
      Endif
    Next
    If agregar = True Then
      'se debe de incluir
      listaCartones.Add(ctmp.id)
      ArrayCartones.Add(ctmp)
      ctmp.generarDibujo(ArrayElementosCarton, Me.tituloCarton)
      Raise creadoCarton(listaCartones.count)
    Endif    
  Wend
  Dec Application.Busy 
  Raise FinCarton()
  
  'todos los cartones creados deben de ser copiados al directorio de bingoedu...
  copiarCartones()
  
  Return True 'se han creado los cartones bien
  
End

Public Sub copiarCartones()
  
  Dim nombrefile As String
  Dim arFile As String[]
  
  'borra todos los archivos que empiecen por carton*
  arfile = Dir(User.home & "/" & "bingoedu/" & Me.NombreFichero, "carton*", gb.file)
  
  For Each nombrefile In arfile
    Kill User.home & "/" & "bingoedu/" & Me.NombreFichero & "/" & nombrefile
    Kill User.home & "/" & "bingoedu/" & Me.NombreFichero & "/mini" & nombrefile
    
  Next
  
  'inicio la copia de archivos 
  arfile = Dir("/tmp", "carton*", gb.file)
  
  For Each nombrefile In arfile
    If Exist(User.home & "/" & "bingoedu/" & Me.NombreFichero & "/" & nombrefile) Then 
      Kill User.home & "/" & "bingoedu/" & Me.NombreFichero & "/" & nombrefile 'lo borro si existe uno igual nombre
    Endif
    
    Copy "/tmp/" & nombrefile To User.home & "/" & "bingoedu/" & Me.NombreFichero & "/" & nombrefile
    
  Next
  
  'inicio la copia de archivos minicartones
  arfile = Dir("/tmp", "minicarton*", gb.file)
  For Each nombrefile In arfile
    If Exist(User.home & "/" & "bingoedu/" & Me.NombreFichero & "/" & nombrefile) Then 
      Kill User.home & "/" & "bingoedu/" & Me.NombreFichero & "/" & nombrefile 'lo borro si existe uno igual nombre
    Endif
    
    Copy "/tmp/" & nombrefile To User.home & "/" & "bingoedu/" & Me.NombreFichero & "/" & nombrefile
  Next
  
End

Public Sub borrarElementoBingo(id As String)
  
  Dim a As Integer
  
  For a = 0 To ArrayElementosBingo.count - 1
    If ArrayElementosBingo[a].id = id Then 
      ArrayElementosBingo.Delete(a)
      Break
    Endif
  Next
  
  For a = 0 To ListaElementosBingo.count - 1
    If ListaElementosBingo[a] = id Then 
      ListaElementosBingo.Delete(a)
      Break
    Endif
  Next
  
End

Public Sub borrarElementoCarton(id As String)
  
  Dim a As Integer
  
  For a = 0 To ArrayElementosCarton.count - 1
    If ArrayElementosCarton[a].id = id Then 
      ArrayElementosCarton.Delete(a)
      Break
    Endif
  Next
  
  For a = 0 To ListaElementosCarton.count - 1
    If ListaElementosCarton[a] = id Then 
      ListaElementosCarton.Delete(a)
      Break
    Endif
  Next
  
End
