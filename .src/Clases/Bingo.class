' Gambas class file

Property NombreFichero As String ''nombre del fichero .be para operaciones obtener el nombre de la carpeta, copiar archivos
Property titulo As String ''titulo del bingo
Property descripcion As String ''describe como es el bingo: se trata de un bingo para aprender matematica de 1º de eso. Tema Tablas de multiplicar
Property tipo As String ''indica el tipo de bingo: para lenguaje,matematicas, ingles, etc...

Public ArrayElementosBingo As New Elemento[] ''donde se guarda los datos que componen el bingo
Public ArrayElementosCarton As New Elemento[] ''donde se guarda los datos que componen el carton

Public ListaElementosBingo As New String[] 'contiene la lista de los id de los elementos de bingo
Public ListaElementosCarton As New String[] 'contiene la lista de los id de los elementos de carton

Public listaCartones As New String[] ' contiene la lista de cartones
Public ArrayCartones As New Carton[] ' contiene los cartones que tiene el bingo

'propiedades del carton
Property tituloCarton As String ''titulo de los cartones

Property tamanoCuadricula As String ''tamaño de la cuadricula 4x3,5x4,5x5

Property cuadrosNegros As Integer ''indica los huecos rellenos en negro

Property cuadrosBlancos As Integer '' indica los huecos que quedaran en blanco

Property ListaElementosRepetidos As String[] ''array que contiene los id de elementos del bingo que tienen que repetirse en cada carton

Property NumeroCartones As Integer ''indica el numero de cartones existentes.

Private $tituloCarton As String
Private $tamanoCuadricula As String
Private $cuadrosNegros As Integer
Private $cuadrosBlancos As Integer
Private $ListaElementosRepetidos As New String[]
Private $NumeroCartones As Integer
Private $nombreFichero As String = "testbingo"

Public Sub _new()

  'creacion de un bingo en "blanco"
  If Not Exist(User.home & "/bingoedu") Then
    Mkdir User.home & "/bingoedu"
  Endif

  ''NOTE: modo test para debug, creacion de directorio test de bingo
  If Not Exist(User.home & "/bingoedu/" & $nombreFichero) Then
    Mkdir User.home & "/bingoedu/" & $nombreFichero
  Endif



End

Public Sub cargadatos(NombreArchivo As String) 'leo un archivo .be y lo cargo en la instancia de clase bingo.

  Dim arraytmp As String[]
  Dim e As Object
  Dim a As Integer
  Dim contenido As String
  Dim VariableDatos As Variant
  Dim clasejson As New JSON354
  '1º, descomrpimir el archivo..
  If Exist(User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & ".tar.gz") Then
    Kill User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & ".tar.gz"
    Wait 0.1
  Endif

  '2º creo carpeta de trabajo en User.home & "/bingoedu/"
  If Exist(User.home & "/bingoedu/" & File.BaseName(NombreArchivo)) Then
    Shell "cd " & User.home & "/bingoedu/;rm -Rf " & File.BaseName(NombreArchivo) Wait 'borrado comleto de un directorio con sus ficheros
  Endif
  'descomprimo el archivo
  Mkdir User.home & "/bingoedu/" & File.BaseName(NombreArchivo)
  Wait 0.1
  Copy NombreArchivo To User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/" & File.BaseName(NombreArchivo) & ".tar.gz"
  Wait 0.1
  'descomprimo
  Shell "cd " & User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/; tar -zxvf \"" & File.BaseName(NombreArchivo) & ".tar.gz\"" Wait
  'borro el archivo comprimido
  Wait 0.1
  Kill User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/" & File.BaseName(NombreArchivo) & ".tar.gz"



  'leo fichero de datos
  'y lo empiezo a cargar en memoria
  contenido = File.Load(User.home & "/bingoedu/" & File.BaseName(NombreArchivo) & "/" & "pruebas.dat")
  VariableDatos = clasejson.Decode(contenido)

  'asigno datos...

  Me.titulo = VariableDatos["titulo"]
  Me.descripcion = VariableDatos["descripcion"]
  Me.tipo = VariableDatos["tipo"]

  'listas
  'limpiar listas de elmentos anteriores
  Me.ListaElementosBingo.Clear()
  Me.ListaElementosCarton.Clear()
  Me.ListaElementosRepetidos.Clear()
  Me.listaCartones.Clear()
  '
  '

  arraytmp = Split(VariableDatos["ListaElementoBingo"], "|")
  For a = 0 To arraytmp.max
    Me.ListaElementosBingo.Add(arraytmp[a])
  Next


  arraytmp = Split(VariableDatos["ListaElementoCarton"], "|")
  For a = 0 To arraytmp.max
    Me.ListaElementosCarton.Add(arraytmp[a])
  Next

  agregarListaElementos(VariableDatos, Me.ListaElementosBingo, Me.ArrayElementosBingo)
  agregarListaElementos(VariableDatos, Me.ListaElementosCarton, Me.ArrayElementosCarton)

  ''TODO: lista de cartornes y array de cartones

  Me.tituloCarton = VariableDatos["TituloCarton"]
  Me.tamanoCuadricula = VariableDatos["TamanoCuadricula"]
  Me.cuadrosNegros = VariableDatos["CuadrosNegros"]
  Me.cuadrosBlancos = VariableDatos["CuadrosBlancos"]

  arraytmp = Split(VariableDatos["ListaElementosRepetidos"], "|")
  For a = 0 To arraytmp.max
    Me.ListaElementosRepetidos.Add(arraytmp[a])
  Next

  Me.NumeroCartones = VariableDatos["NumeroCartones"]

  'lectura de cartones...
  arraytmp = Split(VariableDatos["ListaCartones"], "|")
  For a = 0 To arraytmp.max
    Me.listaCartones.Add(arraytmp[a])
  Next

  agregarCartones(VariableDatos, Me.listaCartones, Me.ArrayCartones)


End

Public Sub agregarCartones(v As Variant, lista As String[], ArrayCar As Carton[])

  Dim a, b As Integer

  Dim c As Carton

  Dim arraytmp As String[]

  ArrayCar.Clear() 'limpio el array de cartones por si hubiera elementos anteriores.

  For a = 0 To lista.Max
    c = New Carton
    c.id = lista[a]
    'cargo lista de elemntos cartones que incluye el carton
    arraytmp = Split(V[lista[a]]["lista"], "|")
    For b = 0 To arraytmp.max
      c.ArraIdElementos.Add(arraytmp[b])
    Next
    ArrayCar.Add(c)
  Next

End



Public Sub agregarListaElementos(v As Variant, lista As String[], ArrayElementos As Elemento[])
  'repetir por cada lista de elemntos Bingo.

  Dim a As Integer
  Dim e As Object

  ArrayElementos.Clear() 'limpio elementos anteriores del array donde voy a introducir los elementos leidos

  For a = 0 To lista.Max
    Debug V[lista[a]]["datos"]["tipo"]

    Select Case V[lista[a]]["datos"]["tipo"]
      Case "sonido"
        e = New ElementoSonido
        e.id = V[lista[a]]["id"]
        e.enlace = V[lista[a]]["datos"]["enlace"]
        e.rutasonido = V[lista[a]]["datos"]["rutasonido"]
        ArrayElementos.Add(e)
      Case "texto"
        e = New ElementoTexto
        e.id = V[lista[a]]["id"]
        e.enlace = V[lista[a]]["datos"]["enlace"]
        e.texto = V[lista[a]]["datos"]["texto"]
        ArrayElementos.Add(e)
      Case "imagen"
        e = New ElementoImagen
        e.id = V[lista[a]]["id"]
        e.enlace = V[lista[a]]["datos"]["enlace"]
        e.rutaimagen = V[lista[a]]["datos"]["rutaimagen"]
        ArrayElementos.Add(e)

    End Select
  Next






End



Public Sub guardarBingo() ''guardar archivo tar.gz con datos del bingo actual

  Dim comando As String ''comando que se ejecutara para crear el tae.gz
  Dim salida As String ''salida que proporciona el comando shell
  Dim res As Integer
  'El archirvo "nombre" debe de contener:
  '-Fichero de texto con Estructura json con datos de
  '1º generar estructura de datos de: titulo, descripcion, tipo,
  '2º generar estructura de datos del Array Elementos Bingo
  '3º generar estructura de datos del Array Elementos Carton
  'Toda la información se pasa a una variable $contenido y se guarda

  File.Save(User.home & "/bingoedu/" & $nombreFichero & "/pruebas.dat", generaJson())
  '-imagenes y sonidos
  '-todo guardado en un tar.gz para facil manipulacion y compartir con otros usuarios.
  'y con terminacion ".be"
  comando = "cd " & User.home & "/bingoedu/" & $nombreFichero & "/;" ''fundamental añadir el punto y coma, para continuar la orden en el shell abierto
  comando &= "tar czvf \"" & $NombreFichero & ".tar.gz\" *" ''comprimimos lo que haya creando un fichero .tar.gz
  Print comando

  Shell comando To salida

  Inc Application.busy
  While Not Exist(User.home & "/bingoedu/" & $nombreFichero & "/" & $NombreFichero & ".tar.gz")
    Wait 0.01
  Wend

  Dec Application.Busy

  If Exist(User.home & "/" & $NombreFichero & ".be") Then
    res = Message.Question(("Existe un fichero con el mismo nombre, ¿desea borrarlo?"), ("Si, borralo y continua"), ("No, cancelar operación"))
    If res = 1 Then
      Kill User.home & "/" & $NombreFichero & ".be" 'borro el fichero que existe, y continuo

    Else
      Kill User.home & "/bingoedu/" & $nombreFichero & "/" & $NombreFichero & ".tar.gz" 'Cancelo operacion, y borro el archivo comprimido que acabo de hacer.
      Debug "Operacion cancelada"
      Return

    Endif
  Endif

  Move User.home & "/bingoedu/" & $nombreFichero & "/" & $NombreFichero & ".tar.gz" To User.home & "/" & $NombreFichero & ".be"

  ''NOTE: ver este enlace http://jsbsan.blogspot.com.es/2014/12/truco-como-guardar-y-abrir-comprimidos.html, para el tema de descompresion.

End


Public Sub DescomprimeBingo(nombre As String) ''lectura de archivo tar.gz del fichero de  datos de bintoedu y descompresion del mismo en la carpeta .config

  'descomprime el archivo dato (un tar.gz), en /tmp, y copia todos los archivos  en la carpeta de configuración (~/.config/BingoEdu/datos)

  'A continuación, ahora el programa deberá recargar la carpeta   ~/.config/BingoEdu/datos, para encontrar los distintos bingos disponibles.
  'y que aparezcan en el gridview inicial.



End

Public Function generaJson() As String

  Dim c As New JSON354

  Dim tempcole As New Collection

  Dim tmpElemento As Elemento

  Dim tmpCarton As Carton
  'Titulo
  tempcole.Add(Me.titulo, "titulo")
  'descripcion
  tempcole.Add(Me.descripcion, "descripcion")
  'tipo
  tempcole.Add(Me.tipo, "tipo") ''tipo del bingo (ingles, matematica, lengua..)
  'lista de elementos bingo y elementos de cartones, separados por caracter |
  tempcole.Add(Me.ListaElementosBingo.Join("|"), "ListaElementoBingo")
  tempcole.Add(Me.ListaElementosCarton.Join("|"), "ListaElementoCarton")

  'guardar elementos....
  For Each tmpElemento In ArrayElementosBingo
    tempcole.Add(tmpElemento.creaVariant(), tmpElemento.id)
  Next

  ''TODO: mirarlo. todos los elementos son indistintos si estan en el bingo que en el carton
  For Each tmpElemento In ArrayElementosCarton
    tempcole.Add(tmpElemento.creaVariant(), tmpElemento.id)
  Next


  'tambien haria falta pasar los datos del carton: tamaño, huecos en negros, casillas vacias, elementos fijos.
  tempcole.Add(Me.tituloCarton, "TituloCarton")
  tempcole.Add(Me.tamanoCuadricula, "TamanoCuadricula")
  tempcole.Add(Me.cuadrosNegros, "CuadrosNegros")
  tempcole.Add(Me.cuadrosBlancos, "CuadrosBlancos")

  tempcole.Add(Me.ListaElementosRepetidos.Join("|"), "ListaElementosRepetidos")

  tempcole.Add(Me.NumeroCartones, "NumeroCartones")

  tempcole.Add(Me.listaCartones.Join("|"), "ListaCartones")

  For Each tmpCarton In Me.ArrayCartones
    tempcole.Add(tmpCarton.creaVariant(), tmpCarton.id)
  Next



  Return c.Encode(tempcole) 'devuelve el contenido de tmpcole como estructura json


End








Public Sub agregarElementoBingo(e As Elemento) 'agregas un elemento bingo a los datos del bingo.

  Me.ArrayElementosBingo.Add(e)
  Me.ListaElementosBingo.Add(e.id)

End


Public Sub agregarElementoCarton(e As Elemento) 'agrega un elemento carton a los datos del bingo

  Me.ArrayElementosCarton.Add(e)
  Me.ListaElementosCarton.Add(e.id)

End

Public Sub agregarCarton(e As Carton) ''agrega un carton a los datos del bingo

  Me.ArrayCartones.Add(e)
  Me.listaCartones.Add(e.id)

End




'-------------------------------------------------------------------------------------
Private $titulo As String
Private $descripcion As String
Private $tipo As String

Private Function titulo_Read() As String

  Return $titulo

End

Private Sub titulo_Write(Value As String)

  $titulo = value

End

Private Function descripcion_Read() As String

  Return $descripcion

End

Private Sub descripcion_Write(Value As String)

  $descripcion = value

End

Private Function tipo_Read() As String

  Return $tipo

End

Private Sub tipo_Write(Value As String)

  $tipo = value

End



Private Function tituloCarton_Read() As String

  Return $tituloCarton

End

Private Sub tituloCarton_Write(Value As String)

  $tituloCarton = value

End

Private Function tamanoCuadricula_Read() As String

  Return $tamanoCuadricula

End

Private Sub tamanoCuadricula_Write(Value As String)

  $tamanoCuadricula = value

End

Private Function cuadrosNegros_Read() As Integer

  Return $cuadrosNegros

End

Private Sub cuadrosNegros_Write(Value As Integer)

  $cuadrosNegros = value


End

Private Function cuadrosBlancos_Read() As Integer

  Return $cuadrosBlancos

End

Private Sub cuadrosBlancos_Write(Value As Integer)


  $cuadrosBlancos = value


End

Private Function ListaElementosRepetidos_Read() As String[]

  Return $ListaElementosRepetidos

End

Private Sub ListaElementosRepetidos_Write(Value As String[])

  $ListaElementosRepetidos = value

End

Private Function NumeroCartones_Read() As Integer

  Return $NumeroCartones

End



Private Sub NumeroCartones_Write(Value As Integer)


  $NumeroCartones = value

End

Private Function NombreFichero_Read() As String

  Return $nombreFichero

End

Private Sub NombreFichero_Write(Value As String)

  $nombreFichero = value

End
