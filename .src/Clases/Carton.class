' Gambas class file

'esta clase contiene los dato de un carton
'lista de elementos
Property ArraIdElementos As String[] 'lista de los array de los id de elementos que contiene este carton
Private $ArraIdElementos As New String[]
Property id As String '' clave que identifica al carton
Private $id As String

Private tipotabla As String 'almacena el tipo de bingo de salida 4x3,5x4,5x5

Public ArrayElmentosCarton As Elemento[]
Public ArrayElmentosBingo As Elemento[]

Public TamanoLetraCarton As Integer = 40 'tamaño por defecto de la letra que sale en el carton

Private textoscarton As String[]

'merjora de algoritmo de colocacion de elementos 
Private listasPosiciones As New Integer[]
'Mejora en la busqueda de elementos, usando colecciones
Private ColeccionElementosCarton As New Collection
Private ColeccionElementosBingo As New Collection

Public Sub _new()
  
  'cuando se crea se identefica
  Me.id = Hex(CFloat(Now) * 86400000) & "_" & Str$(Int(Rnd(1, 100) * 10))
  '' se crea un identificador unico Ref: https://www.gambas-es.org/viewtopic.php?f=5&t=5837
  
End

Private Sub agregaDatos(ByRef datos As Collection) 'al introducirlos por referencia no necesito devolver nada, los añado directamente.
  
  '' datos.Add(Me.id, "id")
  datos.Add(Me.ArraIdElementos.Join("|"), "lista") 'devuelve una cadena con los id de los elementos que contiene
  
End

Public Sub creaVariant() As Variant 'realmente crea una variant con todo el contenido
  
  Dim temp2cole As New Collection
  
  ' 'Dato de Identeificacion
  ' tempcole.Add(Me.id, "id") ''DATO REPETIDO
  
  'añadir datos segun tipo de elemento
  agregaDatos(ByRef temp2cole) 'lo paso por referencia para modificarlo internamente y no tener que usar el valor de retorno
  
  ' tempcole.Add(temp2cole, "datos")
  
  Return temp2cole '
  
End

'-------------------------------------
'generar un carton: datos que se le pasan
'cuadricula
'cuadros negros
'cuadros blancos
'listaelementosrepetidos
'listade elementos -> serán elegidos al azar
'auxiliar:
'comprobar si el carton es diferente a los ya creados
'-------------------------------------

Public Function CompararCarton(c As Carton) As Boolean
  
  Dim cadenaID As String
  
  For Each cadenaID In c.ArraIdElementos
    If $ArraIdElementos.Find(cadenaID) = -1 Then 
      'al menos, no contiene un elemento, por lo tanto son distintos
      Return False
      
    Endif
    
  Next
  Return True 'son iguales, he procesado toda la lista, y todos los he encontrado en el carton.
  
End

Public Function generarCarton(TamanoCuadricula As String, numeroCuadrosNegros As Integer, numeroCuadrosBlancos As Integer, listaRepetido As String[], listaelementos As String[]) As Boolean
  
  'crea la lista de elementos...
  
  Select Case TamanoCuadricula
    Case "4x3" 
      tipotabla = "4x3"
      Return rellenaCarton(12, numeroCuadrosNegros, numeroCuadrosBlancos, listaRepetido, listaelementos)
    Case "5x4"
      tipotabla = "5x4"
      Return rellenaCarton(20, numeroCuadrosNegros, numeroCuadrosBlancos, listaRepetido, listaelementos)
    Case "5x5"
      tipotabla = "5x5"
      Return rellenaCarton(25, numeroCuadrosNegros, numeroCuadrosBlancos, listaRepetido, listaelementos)
    Case Else
      Message.Info(("Error, desconocido tamaño de cuadricula"))
      Return 
      
  End Select
  
End

Private Function rellenaCarton(numero As Integer, numeroCuadrosNegros As Integer, numeroCuadrosBlancos As Integer, listaRepetido As String[], listaelementos As String[]) As Boolean
  
  Dim resp As Boolean
  Dim a As Integer
  Dim elementos As New String[]
  'Dim indice As Integer[] -> para futura mejora
  
  'crea la lista de elementos...
  
  For a = 1 To numero
    elementos.Add("") 'longitud 12 veces
    listasPosiciones.Add(a - 1)
  Next
  
  'convertir array de elementos Me.ArrayElmentosCarton, en una coleccion
  
  For a = 0 To Me.ArrayElmentosCarton.count - 1
    ColeccionElementosCarton.Add(Me.ArrayElmentosCarton[a], Me.ArrayElmentosCarton[a].id)
  Next
  
  For a = 0 To Me.ArrayElmentosBingo.count - 1
    ColeccionElementosBingo.Add(Me.ArrayElmentosBingo[a], Me.ArrayElmentosBingo[a].id)
  Next
  
  'coloco cuadros negros
  colocarCuadros(numero, numeroCuadrosNegros, "idnegro", ByRef elementos)
  'coloco cuadros blancos
  colocarCuadros(numero, numeroCuadrosBlancos, "idblanco", ByRef elementos)
  'colocar elementos de la lista  de repetidos...
  colocarElementosRepetidos(numero, listaRepetido, ByRef elementos)
  'colocar elementos...
  resp = colocarElementos(numero, listaelementos, ByRef elementos, numeroCuadrosBlancos, numeroCuadrosNegros)
  
  $ArraIdElementos = elementos.Copy()
  
  Return resp
  
End

Private Function colocarElementos(longitud As Integer, lista As String[], ByRef elementos As String[], numeroCuadrosBlancos As Integer, numeroCuadrosNegros As Integer) As Boolean
  
  'Dim posicion As Integer
  Dim ele As Object 'elemento
  '  Dim ele2 As Object
  
  Dim l As String[]
  Dim a As Integer
  Dim aleatorio As Integer
  
  l = lista.Copy()
  
  For a = 0 To listasPosiciones.count - 1
    
    While elementos[listasPosiciones[a]] = "" 
      
      If L.COUNT = 2 Then 
        '   Message.Info(("Muy pocos elementos"))
        Return False
      Endif
      
      aleatorio = Int(Rnd(2, l.count))
      
      ele = buscaElemento(l[aleatorio], Me.ArrayElmentosCarton)
      ' If ele.id = "idnegro" Or ele.id = "idblanco" Then 
      '   Continue
      ' Endif
      ' 
      '' comprobar si ya esta elemento...
      Select Case Upper$(ele.tipoElemento())
        Case Upper$("ElementoTexto")
          
          If textoscarton.Find(ele.texto) = -1 Then 
            'se añade elemento ya que es distinto el contenido de las celda
            elementos[listasPosiciones[a]] = l[aleatorio]
            l.Delete(aleatorio)
            textoscarton.Add(ele.texto)
          Else
            'ELEMENTO ENCONTRADO... BORRO DE LA LISTA, PARA NO REPETIRLO MAS
            L.Delete(ALEATORIO)
          Endif
        Case Upper$("ElementoImagen")
          'la comprobación es por id
          If Me.ArraIdElementos.Find(ele.id) = -1 Then 
            
            elementos[listasPosiciones[a]] = l[aleatorio]
            l.Delete(aleatorio)
          Else
            l.Delete(aleatorio)
            
          Endif
          
      End Select
      
      'borro de la lista para no repetirlo
    Wend
    
  Next
  
  Return True
  
End

Private Sub colocarElementosRepetidos(longitud As Integer, listaRepetida As String[], ByRef elementos As String[])
  
  Dim posicion As Integer
  Dim eleBingo As Variant
  Dim eleCarton As Variant
  
  Dim aleatorio As Integer
  Dim a As Integer
  
  textoscarton = New String[]
  
  For a = 1 To listaRepetida.Count
    Do
      posicion = Int(Rnd(0, listasPosiciones.max))
      aleatorio = listasPosiciones[posicion]
      
      If elementos[aleatorio] = "" Then
        
        eleBingo = buscaElementoBingo(listaRepetida[a - 1], Me.ArrayElmentosBingo)
        
        elementos[aleatorio] = eleBingo.enlace
        eleCarton = buscaElemento(eleBingo.enlace, Me.ArrayElmentosCarton)
        If Upper$(eleCarton.tipoElemento()) = Upper$("ElementoTexto") Then 
          textoscarton.Add(eleCarton.texto)
        Else
          Me.ArraIdElementos.Add(eleCarton.id)
        Endif
        'mejora en el algoritmo de relleno de carton
        listasPosiciones.Delete(posicion)
        Break
      Endif
      
    Loop 
    
  Next
  
End

Private Sub colocarCuadros(longitud As Integer, numero As Integer, texto As String, ByRef elementos As String[])
  
  Dim posicion As Integer
  ' Dim textotmp As String
  Dim aleatorio As Integer
  Dim a As Integer
  
  For a = 1 To numero
    Do
      posicion = Int(Rnd(0, listasPosiciones.max))
      aleatorio = listasPosiciones[posicion]
      If elementos[aleatorio] = "" Then
        If texto = "idnegro" Or texto = "idblanco" Then
          elementos[aleatorio] = texto
          listasPosiciones.Delete(posicion)
          Break
          ' Else
          '   'se trata de un texto
          '   If elementos.Find(texto) = -1 Then 
          '     'no encuentra el texto en los elemento, entonces, en principio se puede añadir.
          '     'comparar contenido del carton, si tiene el texto
          '     bandera = True 
          '     For Each textotmp In textoscarton
          '       If textotmp = texto Then 
          '         bandera = False
          '         
          '       Endif
          '       
          '     Next
          '     If bandera = True Then 
          '       elementos[aleatorio] = texto
          '       textoscarton.Add(texto)
          '       Break
          '     Endif
          '   Endif
          
        Endif
      Endif
    Loop 
    
  Next
  
  ''Este algoritmo se puede mejorar, creando una lista enumerada, y extrayendo aleatoriamente uno de los elemento
  ''ese elemnto tiene el numero de indice que ocupará el elemento 
  
End

Private Function ArraIdElementos_Read() As String[]
  
  Return $ArraIdElementos
  
End

Private Sub ArraIdElementos_Write(Value As String[])
  
  $ArraIdElementos = value
  
End

Private Function id_Read() As String
  
  Return $id
  
End

Private Sub id_Write(Value As String)
  
  $id = value
  
End

Public Sub generarDibujo(arrayElementosCarton As Object[], titulo As String) ' ElementoTexto[])
  
  Dim salida As String
  Dim comando As String
  Dim contenido As String
  Dim tabla As String
  Dim contador As Integer = -1
  Dim ele As Object 'ElementoTexto
  
  Dim a, b, afilas, bfilas As Integer
  
  Select Case tipotabla
    Case "4x3"
      tabla = "bingotablas4x3.svg"
      bfilas = 4
      afilas = 3
      
    Case "5x4"
      tabla = "bingotablas5x4.svg"
      bfilas = 5
      afilas = 4
      
    Case "5x5"
      tabla = "bingotablas5x5.svg"
      bfilas = 5
      afilas = 5
      
  End Select
  
  'generar archivo txt
  'cabecera:
  contenido = "[origen]\t" & tabla & "\n" 'la plantilla que usará
  contenido &= "[destino]\t&nombre\n" 'el carton tendrá el nombre de id
  contenido &= "#titulo#\t" & titulo & "\n"
  
  For a = 1 To afilas   'filas
    For b = 1 To bfilas 'columna
      contador += 1
      
      ele = buscaElemento(Me.ArraIdElementos[contador], arrayElementosCarton)
      
      Select Case ele.tipoElemento()
        Case Upper$("ElementoTexto")
          contenido &= "#" & Str$(b) & Str$(a) & "#\t" & ele.texto & "\n"
          ' Case Upper$("ElementoNegro")
          '   contenido &= "#" & Str$(a) & Str$(b) & "#\t \n" 'borro el contenido
          '   contenido &= "[imagen]" & "\t" & "/tmp/cuadroNegro.jpg" & "\n"  'incluir el gráfico de 
          '   ''TODO: ASIGNAR COORDENADAS A CUADROS
          '   contenido &= "[x]" & "\t" & buscaCoordX(b, tipotabla) & "\n"
          '   contenido &= "[y]" & "\t" & buscaCoordy(a, tipotabla) & "\n"
          '   contenido &= "[fw]" & "\t" & "223.27" & "\n" 'siempre es el mismo aunque cambie el carton
          '   contenido &= "[fh]" & "\t" & "191.9" & "\n" 'siempre es el mismo aunque cambie el carton
          ' Case Upper$("ElementoBlanco")
          '   contenido &= "#" & Str$(a) & Str$(b) & "#\t \n" 'borro el contenido
          '   contenido &= "[imagen]" & "\t" & "/tmp/cuadroBlanco.jpg" & "\n"  'incluir el gráfico de 
          '   contenido &= "[x]" & "\t" & buscaCoordX(b, tipotabla) & "\n"
          '   contenido &= "[y]" & "\t" & buscaCoordy(a, tipotabla) & "\n"
          '   contenido &= "[fw]" & "\t" & "223.27" & "\n" 'siempre es el mismo aunque cambie el carton
          '   contenido &= "[fh]" & "\t" & "191.9" & "\n" 'siempre es el mismo aunque cambie el carton
        Case Upper$("ElementoImagen")
          contenido &= "#" & Str$(b) & Str$(a) & "#\t \n" 'borro el contenido
          contenido &= "[imagen]" & "\t" & "/tmp/" & ele.rutaimagen & "\n"  'incluir el gráfico de 
          
          contenido &= "[x]" & "\t" & buscaCoordX(b, tipotabla) & "\n"
          contenido &= "[y]" & "\t" & buscaCoordY(a, tipotabla) & "\n"
          contenido &= "[fw]" & "\t" & "224" & "\n" 'siempre es el mismo aunque cambie el carton
          contenido &= "[fh]" & "\t" & "192" & "\n" 'siempre es el mismo aunque cambie el carton
          contenido &= "[dpi]" & "\t" & "100" & "\n" '' defino calidad de salida del dibujo com  dpi como 100
          
      End Select
    Next
  Next
  
  ''cambio de letra de carton
  tamanoletraCarton = CalculaLongitudyDevuelveSIZE()
  contenido &= "[svg]" & "\t" & "font-size:40px" & "\t" & "font-size:" & Str$(TamanoLetraCarton) & "px" & "\n"
  
  File.Save("/tmp/" & "carton" & Me.id & ".txt", contenido)
  
  While (Not Exist("/tmp/" & "carton" & Me.id & ".txt"))
    Wait 0.01
  Wend
  comando = "cd /tmp;SisRePlantillas " & "/tmp/" & "carton" & Me.id & ".txt"
  Debug "Comando uso SisRePlantillas:"; comando
  Shell comando To salida
  Debug salida
  
  'hago miniaturas
  comando = "convert /tmp/" & "carton" & Me.id & "_" & Replace(tabla, ".svg", "") & ".png" & " -resize 137x95 /tmp/mini" & "carton" & Me.id & "_" & Replace(tabla, ".svg", "") & ".png"
  Shell comando To salida
  
  Debug comando
  Debug salida
  
End

Public Function buscaCoordX(valor As Integer, tipotablaAsignada As String) As String
  
  Select Case tipotablaAsignada
    Case "4x3"
      Return Choose(valor, "73", "308", "542", "776")
    Case "5x4"
      Return Choose(valor, "81", "314", "549", "784", "1018")
    Case "5x5"
      Return Choose(valor, "78", "312", "546", "780", "1015")
  End Select
  
End

Public Function buscaCoordY(valor As Integer, tipotablaAsignada As String) As String
  
  Select Case tipotablaAsignada
    Case "4x3"
      Return Choose(valor, "73", "275", "478")
    Case "5x4"
      Return Choose(valor, "82", "285", "487", "690")
    Case "5x5"
      Return Choose(valor, "81", "284", "487", "690", "896")
  End Select
  
End  

'---------------------------------------------------------
'codigo de la clase binco, que dado un id, busca el elemento que lo tenga.
'
Public Function buscaElementoBingo(id As String, Optional arrayElem As Elemento[]) As Elemento
  
  Return ColeccionElementosBingo[id] '
  
End
'
'

Public Function buscaElemento(id As String, Optional arrayElem As Elemento[]) As Elemento
  
  Return ColeccionElementosCarton[id]
  
  ' 
  ' 
  ' Dim ebuscado As Elemento
  ' 'dado un id, y una lista de elementos[], nos devuelve el elemento que tenga ese id.
  ' 
  ' For Each ebuscado In arrayElem
  '   If ebuscado.id = id Then
  '     Return ebuscado
  '     
  '   Endif
  ' Next
  ' 
  ' 'Si llegamos a este punto, no ha encontrado el elemento enlazado...hay un error
  ' 'poner mensaje de error o devolver null
  ' Return Null
  
End

'----------------------------------------------------------------------------------------

Public Function CalculaLongitudyDevuelveSIZE() As Integer
  
  Dim palabra As String
  Dim longitud As Integer = 0
  
  For Each palabra In textoscarton
    If Len(palabra) > longitud Then longitud = Len(palabra)
  Next
  
  Select Case longitud
    Case 1
      Return 145
    Case 2
      Return 145
    Case 3
      Return 145
    Case 4
      Return 140
    Case 5
      Return 105
    Case 6
      Return 75
    Case 7
      Return 75
    Case 8
      Return 65
    Case 9
      Return 55
    Case 10
      Return 50
    Case 11
      Return 45
    Case 12
      Return 40
    Default
      Return 30
  End Select
  
End
